service: typescript-sls
provider:
  name: aws
  runtime: nodejs10.x
plugins:
  - serverless-iam-roles-per-function
  - serverless-cf-vars
  - serverless-plugin-typescript
functions:
  tsFunction:
    handler: index.handler
    description:
      Fn::Sub:
        - 'Stack #{StackTagName} Environment #{EnvironmentTagName} Function #{ResourceName}'
        - ResourceName: tsFunction
    runtime: nodejs10.x
    tracing: Active
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
        Resource: '*'
    tags:
      runtimeOption: typescript
  normalFunction:
    handler: index.handler
    description:
      Fn::Sub:
        - 'Stack #{StackTagName} Environment #{EnvironmentTagName} Function #{ResourceName}'
        - ResourceName: normalFunction
    runtime: nodejs10.x
    tracing: Active
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
        Resource: '*'
resources:
  Parameters:
    StackTagName:
      Type: String
      Description: Stack Name (injected by Stackery at deployment time)
      Default: typescript-sls
    EnvironmentTagName:
      Type: String
      Description: Environment Name (injected by Stackery at deployment time)
      Default: dev
    DefaultVPCId:
      Type: AWS::EC2::VPC::Id
      Description: AWS account-specific default VPC ID (injected by Stackery at deployment time)
    DefaultVPCSubnets:
      Type: List<AWS::EC2::Subnet::Id>
      Description: AWS account-specific default VPC subnets (injected by Stackery at deployment time)
  Resources:
    Database:
      Type: AWS::RDS::DBCluster
      Properties:
        BackupRetentionPeriod: 1
        DBSubnetGroupName:
          Ref: DatabaseSubnetGroup
        Engine: aurora-postgresql
        EngineMode: serverless
        MasterUsername: root
        MasterUserPassword: password
        ScalingConfiguration:
          AutoPause: false
          MinCapacity: 2
          MaxCapacity: 384
        StorageEncrypted: true
        VpcSecurityGroupIds:
          - Ref: DatabaseSecurityGroup
    DatabaseSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription:
          Fn::Sub:
            - 'Stack #{StackTagName} Environment #{EnvironmentTagName} Database #{ResourceName} VPC Subnets'
            - ResourceName: Database
        SubnetIds:
          Ref: DefaultVPCSubnets
        Tags:
          - Key: Name
            Value:
              Fn::Sub:
                - 'Stack #{StackTagName} Environment #{EnvironmentTagName} Database #{ResourceName} VPC Subnets'
                - ResourceName: Database
    DatabaseSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Database Security Group
        SecurityGroupIngress:
          CidrIp: 0.0.0.0/0
          FromPort: 3306
          IpProtocol: tcp
          ToPort: 3306
        Tags:
          - Key: Name
            Value:
              Fn::Sub:
                - 'Stack #{StackTagName} Environment #{EnvironmentTagName} Database #{ResourceName} VPC Security Group'
                - ResourceName: Database
        VpcId:
          Ref: DefaultVPCId